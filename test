/**
 * 
 */
import java.util.*;

public class ListCompareTest {

	/**
	 * @param args
	 */
	private static final int COUNT = 100000;
    private static LinkedList linkedList = new LinkedList();
    private static ArrayList arrayList = new ArrayList();
    private static Vector vector = new Vector();
    
    // 获取list的名称
    private static String getListName(List list) {
        if (list instanceof LinkedList) {
            return "LinkedList";
        } else if (list instanceof ArrayList) {
            return "ArrayList";
        } else if (list instanceof Vector) {
            return "Vector";
        } else {
            return "List";
        }
    }
    // 向list的指定位置插入COUNT个元素，并统计时间
    private static void insertByPosition(List list) {
        long startTime = System.currentTimeMillis();
        // 向list的位置0插入COUNT个数
        for (int i=0; i<COUNT; i++)
            list.add(0, i);
        long endTime = System.currentTimeMillis();
        long interval = endTime - startTime;
        System.out.println(getListName(list) + " : insert "+COUNT+" elements into the 1st position use time：" + interval+" ms");
    }
    // 从list的指定位置删除COUNT个元素，并统计时间
    private static void removeByPosition(List list) {
        long startTime = System.currentTimeMillis();
        // 删除list第一个位置元素
        for (int i=0; i<COUNT; i++)
            list.remove(0);
        long endTime = System.currentTimeMillis();
        long interval = endTime - startTime;
        System.out.println(getListName(list) + " : remove "+COUNT+" elements from the 1st position use time：" + interval+" ms");
    }
    // 根据position，不断从list中读取元素，并统计时间
    private static void readByPosition(List list) {
        long startTime = System.currentTimeMillis();
        // 读取list元素
        for (int i=0; i<COUNT; i++)
            list.get(i);
        long endTime = System.currentTimeMillis();
        long interval = endTime - startTime;
        System.out.println(getListName(list) + " : get "+COUNT+" elements by position use time：" + interval+" ms");
    }
    
    private static void iteratorByPosition(List list){
    	for (int i=0; i<COUNT; i++)
            list.add(0, i);
    	Iterator iterator  = list.iterator();  
    	long startTime = System.currentTimeMillis();
    	while(iterator.hasNext())//如果仍有元素可以迭代，则返回 true
    	{
    	iterator.next();//返回迭代的下一个元素。
    	}
    	long endTime = System.currentTimeMillis();
        long interval = endTime - startTime;
        System.out.println(getListName(list) + " : iteration "+COUNT+" elements by position use time：" + interval+" ms");
    }
    
    
    

    public void SysOpter(){
    	System.out.println();
        // 插入
        insertByPosition(vector) ;
        insertByPosition(linkedList) ;
        insertByPosition(arrayList) ;
        // 换行符
        System.out.println();
        // 随机读取
        readByPosition(vector);
        readByPosition(linkedList);
        readByPosition(arrayList);
        // 换行符
        System.out.println();
        // 删除 
        removeByPosition(vector);
        removeByPosition(linkedList);
        removeByPosition(arrayList);
        //换行符
        System.out.println();
        //迭代
        iteratorByPosition(vector);
        iteratorByPosition(linkedList);
        iteratorByPosition(arrayList);
        
        
    }
	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		ListCompareTest tester=new ListCompareTest();
		tester.SysOpter();

	}

}
